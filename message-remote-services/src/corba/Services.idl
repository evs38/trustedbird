/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is BT Global Services / Etat francais Ministere de la Defense
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Olivier PARNIERE <olivier.parniere_AT_gmail.com> <olivier.parniere_AT_bt.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
/*
*
* Server Services Corba IDL
*
*/

exception CInternalServerException {
    string cause;
};

struct CAccount {
    string serverHostName;
    
    string key;
};

typedef sequence<CAccount> CAccounts;

interface AccountService {
    
    CAccounts GetAllAccounts() raises (CInternalServerException);
    
};

struct CHeader {
    string key;
    string value;
};

typedef sequence<CHeader> CHeaders;

typedef sequence<string> Addresses;

struct CSecurity {
    boolean isSigned;
    boolean isCrypted;
};

struct CDSNType {
    boolean isReturnFullHDRRequested;
    boolean isOnSuccessRequested;
    boolean isOnFailureRequested;
    boolean isOnDelayRequested;
    boolean isNeverRequested;

};

struct CNotification {
    boolean isDSNRequested;
    CDSNType DSNType;
    boolean isMDNReadRequested;
};

struct CAttachment {
    string dirPath;
    string fileName;
    string mimeType;
};

typedef sequence<CAttachment> CAttachments;

struct CMessage {
    Addresses recipients_to;
    Addresses recipients_cc;
    Addresses recipients_bcc;
    CNotification notification;
    string subject;
    string body;
    string uuid;
    CSecurity security;
    CHeaders p_headers;
    CAttachments p_attachments;
};

interface MessageSendListener {
    void OnStop(in string id, in boolean success);
};

interface MessageComposeService {

    void SendMessage(in CAccount p_account, in CMessage p_message, in MessageSendListener p_listener, in boolean openComposeWindowOnBadFormat) raises (CInternalServerException);
};

struct CMessageHdr {
        string id;
        unsigned long key;
        string uri;
        string author;
        string subject;
        Addresses recipients;
        Addresses ccRecipients;
        string date;
        string charset;
        boolean isRead;
        unsigned long size;
};

typedef sequence<CMessageHdr> CMessageHdrs;

struct CFolder {
        string name;
        string uri;
};

typedef sequence<CFolder> CFolders;

interface SourceMessageListener {
    void OnLoad(in string source);
};

interface MessageBrowseService {
        void GetRootFolder(in CAccount p_account, out CFolder p_rootFolder) raises (CInternalServerException);
        void GetAllFolders(in CFolder p_rootFolder, out CFolders p_folders) raises (CInternalServerException);
        void GetMessageHdrs(in CFolder p_folder, out CMessageHdrs p_messageHdrs) raises (CInternalServerException);
        void GetSourceMessage(in CMessageHdr p_messageHdr, in SourceMessageListener p_sourceMessageListener) raises (CInternalServerException);
        void GetSourceMessage2(in string uri, out string source) raises (CInternalServerException);
        void GetBody(in CMessageHdr p_messageHdr, in SourceMessageListener p_sourceMessageListener) raises (CInternalServerException);
};
