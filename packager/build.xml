<?xml version="1.0" encoding="UTF-8"?>
<!--

Trustedbird and add-on packager


Olivier Parniere
Olivier Brun
Raphael Fairise



Build and package Trustedbird and all add-ons:
$ ant build-all

Build and package Trustedbird email client:
$ ant trustedbird

Package all add-ons:
$ ant package-addons


Generate development builds (install.rdf and update.rdf linked to nightly builds):
$ ant -Dnightly=1 build-all

Generate builds for addons.mozilla.org without updateURL/updateKey in install.rdf:
$ ant -Damo=1 package-addons

-->
<project name="Trustedbird Packager" default="build-all">
  <description>Build Trustedbird and add-ons</description>

  <property file="packager.properties" />

  <property name="local.build.dir" value="build" />
  <property name="local.dist.dir" value="dist" />
  <property name="local.tools.dir" value="tools" />

  <!-- ant-contrib library -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${local.tools.dir}/ant-contrib-1.0b3.jar" />
    </classpath>
  </taskdef>


  <!-- Target: build-all -->
  <target name="build-all" description="Extract Thunderbird, patch and build Trustedbird and all add-ons" depends="distclean, trustedbird, package-addons">
  </target>


  <!-- Target: trustedbird -->
  <target name="trustedbird" description="Extract Thunderbird, patch and build Trustedbird" depends="clean-trustedbird, extract-thunderbird, patch-trustedbird, package-trustedbird-source, build-trustedbird, package-trustedbird">
  </target>


  <!-- Target: distclean -->
  <target name="distclean" description="Clean build and dist directories">
    <delete dir="${local.build.dir}" />
    <delete dir="${local.dist.dir}" />
  </target>


  <!-- Target: clean-trustedbird -->
  <target name="clean-trustedbird" description="Clean Trustedbird build directory">
    <delete dir="${local.build.dir}/mozilla" />
  </target>


  <!-- Target: clean-addons -->
  <target name="clean-addons" description="Clean built add-ons">
    <delete failonerror="false">
      <fileset dir="${local.dist.dir}">
        <include name="*.xpi" />
        <include name="*.zip" />
      </fileset>
    </delete>
    <delete dir="${local.dist.dir}/updates" />
  </target>


  <!-- Target: extract-thunderbird -->
  <target name="extract-thunderbird" description="Extract Thunderbird source package" depends="clean-trustedbird">
    <available file="${thunderbird.source.file.name}" property="thunderbird.source.file.available" />
    <fail message="File ${thunderbird.source.file.name} not found! Download it from ftp://ftp.mozilla.org/pub/thunderbird/releases/" unless="thunderbird.source.file.available" />

    <!-- Verify checksum -->
    <checksum file="${thunderbird.source.file.name}" algorithm="sha1" property="${thunderbird.source.file.sha1sum}" verifyproperty="thunderbird.source.file.checksum.result" />
    <if>
      <equals arg1="${thunderbird.source.file.checksum.result}" arg2="false" />
      <then>
        <fail message="${thunderbird.source.file.name} has a wrong checksum!" />
      </then>
    </if>

    <echo message="Extracting Thunderbird source package..." />

    <!-- Extract with exec tar in order to preserve permissions -->
    <mkdir dir="${local.build.dir}" />
    <exec executable="tar" failonerror="true">
      <arg value="xjf" />
      <arg value="${thunderbird.source.file.name}" />
      <arg value="-C" />
      <arg value="${local.build.dir}/" />
    </exec>
  </target>


  <!-- Target: patch-trustedbird -->
  <target name="patch-trustedbird" description="Patch Thunderbird sources with Trustedbird">
    <available file="${local.build.dir}/mozilla" property="thunderbird.source.available" />
    <fail message="Thunderbird source directory not found! Launch target 'extract-thunderbird' first." unless="thunderbird.source.available" />

    <echo message="Patching Thunderbird source with Trustedbird..." />

    <!-- Copy patch directory with exec tar in order to preserve permissions -->
    <exec executable="tar" failonerror="true">
      <arg value="cf" />
      <arg value=".temp.trustedbird-patch" />
      <arg value="-C" />
      <arg value="../${trustedbird-patch-tb2.path}" />
      <arg value="." />
    </exec>
    <exec executable="tar" failonerror="true">
      <arg value="xf" />
      <arg value=".temp.trustedbird-patch" />
      <arg value="-C" />
      <arg value="${local.build.dir}/mozilla/" />
    </exec>
    <delete file=".temp.trustedbird-patch" />
  </target>


  <!-- Target: -define-trustedbird-config (private) -->
  <target name="-define-trustedbird-config">
    <available file="${local.build.dir}/mozilla/version.trustedbird" property="trustedbird.source.available" />
    <fail message="Trustedbird source not found! Launch targets 'extract-thunderbird' and 'patch-trustedbird' first." unless="trustedbird.source.available" />

    <condition property="isUnix">
      <os family="unix" />
    </condition>

    <if>
      <isset property="isUnix" />
      <then>
        <property name="local.checkbuild.file" value="dist/bin/trustedbird" />
      </then>
      <else>
        <property name="local.checkbuild.file" value="dist/bin/trustedbird.exe" />
      </else>
    </if>

    <!-- Get Trustedbird version -->
    <loadfile property="local.trustedbird.versionfile" srcfile="${local.build.dir}/mozilla/version.trustedbird">
      <filterchain>
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <!-- Get revision from Git -->
    <exec executable="sh" outputproperty="local.trustedbird.revision" failonerror="true">
      <arg value="${local.tools.dir}/getGitRevisionDate.sh" />
      <arg value="../${trustedbird-patch-tb2.path}" />
    </exec>

    <if>
      <isset property="nightly" />
      <then>
        <property name="local.trustedbird.version" value="${local.trustedbird.versionfile}-nightly${local.trustedbird.revision}" />
      </then>
      <else>
        <property name="local.trustedbird.version" value="${local.trustedbird.versionfile}" />
      </else>
    </if>
  </target>


  <!-- Target: package-trustedbird-source -->
  <target name="package-trustedbird-source" description="Create Trustedbird patch source package" depends="-define-trustedbird-config">
    <mkdir dir="${local.dist.dir}" />
    <exec executable="tar" failonerror="true">
      <arg value="cjf" />
      <arg value="${local.dist.dir}/trustedbird-patch-tb2-source_${local.trustedbird.version}.tar.bz2" />
      <arg value="-C" />
      <arg value=".." />
      <arg value="${trustedbird-patch-tb2.path}" />
    </exec>
  </target>


  <!-- Target: build-trustedbird -->
  <target name="build-trustedbird" description="Build Trustedbird" depends="-define-trustedbird-config">
    <!-- Set version file -->
    <if>
      <not>
        <available file="${local.build.dir}/mozilla/mail/config/version.txt-orig" />
      </not>
      <then>
        <move file="${local.build.dir}/mozilla/mail/config/version.txt" tofile="${local.build.dir}/mozilla/mail/config/version.txt-orig" />
      </then>
    </if>
    <loadfile property="local.mozilla.version" srcfile="${local.build.dir}/mozilla/mail/config/version.txt-orig">
      <filterchain>
        <striplinebreaks />
      </filterchain>
    </loadfile>
    <echo message="${local.mozilla.version}+trustedbird.${local.trustedbird.version}" file="${local.build.dir}/mozilla/mail/config/version.txt" />

    <!-- Build -->
    <exec executable="make" dir="${local.build.dir}/mozilla" failonerror="true">
      <!-- Workaround multiple crashes in xulrunner in Ubuntu 8.10 and later
            where "-D_FORTIFY_SOURCE=2" is set by default in GCC -->
      <arg value="CPPFLAGS=-U_FORTIFY_SOURCE" />
      <arg value="-f" />
      <arg value="client.mk" />
      <arg value="build" />
    </exec>

    <!-- Restore version file -->
    <move file="${local.build.dir}/mozilla/mail/config/version.txt-orig" tofile="${local.build.dir}/mozilla/mail/config/version.txt" />
  </target>


  <!-- Target: package-trustedbird -->
  <target name="package-trustedbird" description="Create Trustedbird package" depends="-define-trustedbird-config">
    <available file="${local.build.dir}/mozilla/obj/${local.checkbuild.file}" property="build.success" />
    <fail message="File ${local.checkbuild.file} not found! Build Trustedbird first." unless="build.success" />

    <mkdir dir="${local.dist.dir}" />

    <if>
      <isset property="isUnix" />
      <then>
        <!-- Create package -->
        <exec executable="make" dir="${local.build.dir}/mozilla/obj" failonerror="true">
          <arg value="-C" />
          <arg value="mail/installer" />
        </exec>

        <!-- Remove existing packages -->
        <delete failonerror="false">
          <fileset dir="${local.dist.dir}">
            <include name="*.tar.gz" />
            <include name="*.deb" />
          </fileset>
        </delete>

        <!-- Rename package -->
        <copy todir="${local.dist.dir}/">
          <fileset dir="${local.build.dir}/mozilla/obj/dist">
            <include name="*.tar.gz" />
          </fileset>
          <mapper type="regexp" from=".*\.([^\.]+)\.tar\.gz$" to="trustedbird_${local.trustedbird.version}_\1.tar.gz" />
        </copy>

        <!-- Create Debian package -->
        <if>
          <available file="/usr/bin/dpkg-deb" />
          <then>
            <copy todir="${local.build.dir}/">
              <fileset dir="${local.build.dir}/mozilla/obj/dist">
                <include name="*.tar.gz" />
              </fileset>
              <mapper type="regexp" from="(.*)$" to="trustedbird.tar.gz" />
            </copy>
            <exec executable="sh" failonerror="true">
              <arg value="${local.tools.dir}/createDebianPackage.sh" />
              <arg value="${local.build.dir}" />
              <arg value="${local.build.dir}/trustedbird.tar.gz" />
              <arg value="${local.trustedbird.version}" />
              <arg value="${local.tools.dir}" />
            </exec>
            <copy file="${local.build.dir}/trustedbird.deb" tofile="${local.dist.dir}/trustedbird_${local.trustedbird.version}_i686.deb" />
          </then>
        </if>
      </then>
      <else>
        <!-- Create package -->
        <exec executable="make" dir="${local.build.dir}/mozilla/obj" failonerror="true">
          <arg value="-C" />
          <arg value="mail/installer" />
          <arg value="installer" />
        </exec>

        <!-- Rename package -->
        <copy todir="${local.dist.dir}/">
          <fileset dir="${local.build.dir}/mozilla/obj/dist/install/sea">
            <include name="*.exe" />
          </fileset>
          <mapper type="regexp" from="(.*)$" to="trustedbird_${local.trustedbird.version}_win32.installer.exe" />
        </copy>
      </else>
    </if>
  </target>


  <!-- Target: package-addons -->
  <target name="package-addons" description="Create add-on packages">
    <foreach list="${addon.list}" target="-package-addon" param="local.addon.tempname" />
  </target>


  <!-- Target: package-mrs -->
  <target name="package-mrs" description="Package only MRS add-on">
    <antcall target="-package-addon">
      <param name="local.addon.tempname" value="mrs" />
    </antcall>
  </target>


  <!-- Target: -package-addon (private) -->
  <target name="-package-addon">
    <tstamp />
    <mkdir dir="${local.build.dir}" />
    <mkdir dir="${local.dist.dir}" />

    <!-- Get the path of the add-on -->
    <propertycopy name="local.addon.path" from="addon.${local.addon.tempname}.path" />

    <!-- Rename MRS addon for Linux/Windows -->
    <if>
      <equals arg1="${local.addon.tempname}" arg2="mrs" />
      <then>
        <if>
          <os family="unix" />
          <then>
            <property name="local.addon.name" value="${local.addon.tempname}-linux-x86" />
            <property name="local.addon.target.platform" value="Linux_x86-gcc3" />
          </then>
          <else>
            <property name="local.addon.name" value="${local.addon.tempname}-win" />
            <property name="local.addon.target.platform" value="WINNT_x86-msvc" />
          </else>
        </if>
      </then>
      <else>
        <property name="local.addon.name" value="${local.addon.tempname}" />
        <property name="local.addon.target.platform" value="" />
      </else>
    </if>

    <!-- Clean addon directory -->
    <delete dir="${local.build.dir}/${local.addon.name}" />
    <mkdir dir="${local.build.dir}/${local.addon.name}" />

    <!-- Copy add-on directory with exec tar in order to preserve permissions -->
    <exec executable="tar" failonerror="true">
      <arg value="cf" />
      <arg value=".temp.add-on" />
      <arg value="-C" />
      <arg value="../${local.addon.path}" />
      <arg value="." />
    </exec>
    <exec executable="tar" failonerror="true">
      <arg value="xf" />
      <arg value=".temp.add-on" />
      <arg value="-C" />
      <arg value="${local.build.dir}/${local.addon.name}/" />
    </exec>
    <delete file=".temp.add-on" />

    <!-- Get version -->
    <loadfile property="local.addon.versionfile" srcfile="${local.build.dir}/${local.addon.name}/version">
      <filterchain>
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <!-- Get update key (public key for signing updates) -->
    <loadfile property="local.update.key" srcfile="updateKey" failonerror="false">
      <filterchain>
        <striplinebreaks />
      </filterchain>
    </loadfile>
    <!-- Default update key if file not found -->
    <property name="local.update.key" value="updates disabled" />

    <!-- Get revision from Git -->
    <if>
      <or>
        <equals arg1="${local.addon.name}" arg2="all-addons-trustedbird" />
        <equals arg1="${local.addon.name}" arg2="all-addons-tb2" />
        <equals arg1="${local.addon.name}" arg2="all-addons-tb3" />
      </or>
      <then>
        <!-- Get last project revision for all-addons -->
        <exec executable="sh" outputproperty="local.addon.revision" failonerror="true">
          <arg value="${local.tools.dir}/getGitRevisionDate.sh" />
          <arg value="../" />
        </exec>
      </then>
      <else>
        <!-- Get last revision of the add-on -->
        <exec executable="sh" outputproperty="local.addon.revision" failonerror="true">
          <arg value="${local.tools.dir}/getGitRevisionDate.sh" />
          <arg value="../${local.addon.path}" />
        </exec>
      </else>
    </if>

    <if>
      <isset property="nightly" />
      <then>
        <property name="local.addon.version" value="${local.addon.versionfile}-nightly${local.addon.revision}" />
        <property name="local.addon.update.rdf.filename" value="update-nightly.rdf" />
        <property name="local.addon.update.path" value="${addon.nightly.url}/${DSTAMP}" />
      </then>
      <else>
        <property name="local.addon.version" value="${local.addon.versionfile}" />
        <property name="local.addon.update.rdf.filename" value="update.rdf" />
        <property name="local.addon.update.path" value="${addon.releases.url}/${local.addon.name}" />
      </else>
    </if>

    <!-- XPI file name -->
    <property name="local.addon.filename" value="${local.addon.name}_${local.addon.version}.xpi" />

    <!-- Remove updateURL and updateKey for addons.mozilla.org -->
    <if>
      <isset property="amo" />
      <then>
        <replaceregexp file="${local.build.dir}/${local.addon.name}/install.rdf" match="&lt;em:updateURL&gt;.*&lt;/em:updateURL&gt;" replace="" />
        <replaceregexp file="${local.build.dir}/${local.addon.name}/install.rdf" match="&lt;em:updateKey&gt;.*&lt;/em:updateKey&gt;" replace="" />
      </then>
    </if>

    <!-- Add version -->
    <replace file="${local.build.dir}/${local.addon.name}/install.rdf" token="__VERSION__" value="${local.addon.version}" />
    <replace file="${local.build.dir}/${local.addon.name}/update.rdf" token="__VERSION__" value="${local.addon.version}" />

    <!-- Add update.rdf URL -->
    <replace file="${local.build.dir}/${local.addon.name}/install.rdf" token="__UPDATE_RDF_URL__" value="${addon.updates.url}/${local.addon.name}/${local.addon.update.rdf.filename}" />

    <!-- Add update key -->
    <replace file="${local.build.dir}/${local.addon.name}/install.rdf" token="__UPDATE_KEY__" value="${local.update.key}" />

    <!-- Add target platform -->
    <replace file="${local.build.dir}/${local.addon.name}/install.rdf" token="__TARGET_PLATFORM__" value="${local.addon.target.platform}" />

    <!-- Add XPI URL -->
    <replace file="${local.build.dir}/${local.addon.name}/update.rdf" token="__XPI_URL__" value="${local.addon.update.path}/${local.addon.filename}" />

    <!-- Call ant if available -->
    <if>
      <available file="${local.build.dir}/${local.addon.name}/build.xml" />
      <then>
        <ant inheritall="false" dir="${local.build.dir}/${local.addon.name}" />
        <property name="local.zip.basedir" value="${local.build.dir}/${local.addon.name}/xpi" />
      </then>
      <else>
        <property name="local.zip.basedir" value="${local.build.dir}/${local.addon.name}" />
      </else>
    </if>

    <!-- Only for special add-ons 'all-addons-trustedbird': copy all already built add-ons -->
    <if>
      <equals arg1="${local.addon.name}" arg2="all-addons-trustedbird" />
      <then>
        <copy todir="${local.build.dir}/${local.addon.name}/">
          <fileset dir="${local.dist.dir}" includes="${addon.all-addons-trustedbird.includes}" excludes="all-addons* ${addon.all-addons-trustedbird.excludes}" />
        </copy>
      </then>
    </if>

    <!-- Only for special add-ons 'all-addons-tb2': copy all already built add-ons -->
    <if>
      <equals arg1="${local.addon.name}" arg2="all-addons-tb2" />
      <then>
        <copy todir="${local.build.dir}/${local.addon.name}/">
          <fileset dir="${local.dist.dir}" includes="${addon.all-addons-tb2.includes}" excludes="all-addons* ${addon.all-addons-tb2.excludes}" />
        </copy>
      </then>
    </if>

    <!-- Only for special add-ons 'all-addons-tb3': copy all already built add-ons -->
    <if>
      <equals arg1="${local.addon.name}" arg2="all-addons-tb3" />
      <then>
        <copy todir="${local.build.dir}/${local.addon.name}/">
          <fileset dir="${local.dist.dir}" includes="${addon.all-addons-tb3.includes}" excludes="all-addons* ${addon.all-addons-tb3.excludes}" />
        </copy>
      </then>
    </if>

    <!-- Create package -->
    <if>
      <available file="${local.build.dir}/${local.addon.name}/${addon.excludesfile}" />
      <then>
        <zip destfile="${local.dist.dir}/${local.addon.filename}" basedir="${local.build.dir}/${local.addon.name}" excludes="${addon.excludesfile} ${addon.excludes}" excludesfile="${local.build.dir}/${local.addon.name}/${addon.excludesfile}" />
      </then>
      <else>
        <zip destfile="${local.dist.dir}/${local.addon.filename}" basedir="${local.zip.basedir}" excludes="${addon.excludes}" />
      </else>
    </if>

    <!-- Compute hash of XPI file -->
    <checksum file="${local.dist.dir}/${local.addon.filename}" algorithm="sha1" property="local.update.hash" />

    <!-- Add XPI hash -->
    <replace file="${local.build.dir}/${local.addon.name}/update.rdf" token="__UPDATE_HASH__" value="sha1:${local.update.hash}" />

    <!-- Copy update.rdf -->
    <mkdir dir="${local.dist.dir}/updates/${local.addon.name}" />
    <copy file="${local.build.dir}/${local.addon.name}/update.rdf" tofile="${local.dist.dir}/updates/${local.addon.name}/${local.addon.update.rdf.filename}" />

    <!-- Only for MRS add-on: build and package client API -->
    <if>
      <equals arg1="${local.addon.tempname}" arg2="mrs" />
      <then>
        <ant dir="${local.build.dir}/${local.addon.name}/api/java" />
        <move file="${local.build.dir}/${local.addon.name}/api/java/dist/MessageRemoteServicesJavaAPI.zip" tofile="${local.dist.dir}/${local.addon.tempname}-JavaAPI_${local.addon.version}.zip" />
      </then>
    </if>

  </target>

</project>
